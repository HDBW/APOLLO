<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0" user-scalable="no" />
    <title></title>
    <style>

        body {
            font-family: NotoSansRegular, sans-serif;
            background-color: #FEFCF7;
            padding: 0px 16px;
            margin: 0px;
            line-height: 3;
        }

        input[type=email], select {
            color: #420A98;
            border: 0px;
            font-size: 1rem;
            margin: 0px;
            padding: 0px;
            height: 28px;
            width: 128px;
            background-color: white;
            padding: 8px 16px 8px 16px;
            border-radius: 4px;
            box-shadow: 2px 2px 5px 1px #846C4B;
        }

            input[type=email]:focus, select:focus {
                outline: #420A98 solid 2px;
                outline-offset: -2px;
            }

        .inputdiv {
            height: 44px;
            width: 160px;
            line-height: 0;
            margin: 0px 8px -16px 8px;
            box-sizing: border-box;
            border: 0px;
            border-radius: 4px;
            background-color: white;
            box-shadow: 2px 2px 5px 1px #846C4B;
            overflow: hidden;
            display: inline-block;
        }

        p {
            line-height: 3;
            font-size: 1rem;
            text-align: left;
        }
    </style>
    <script src="_hwv/HybridWebView.js"></script>
    <script type="text/javascript">
        function addListener(id) {
            var source = document.getElementById(id);
            source.addEventListener('input', onInput);
            source.addEventListener("focus", onFocus);
            source.addEventListener('focusout', onUnfocus);
            source.addEventListener('keydown', onKeydown);

        }

        function onInput(e) {
            var text = e.target.value;
            HybridWebView.SendInvokeMessageToDotNet("SetValue", [e.target.id, text]);
        }

        function onKeydown(e) {
            if (e.which == 13) {
                let active = document.activeElement;
                if (active == null) {
                    return;
                }

                var next = findNextTabStop(active);
                if (next != null) {
                    next.focus();
                }
                else {
                    active.blur();
                }
            }
        }

        function findNextTabStop(el) {
            var universe = document.querySelectorAll('input, button, select, textarea, a[href]');
            var list = Array.prototype.filter.call(universe, function (item) { return item.tabIndex >= "0" });
            var index = list.indexOf(el);
            return list[index + 1] || null;
        }

        function removeFocus(id) {
            var el = document.getElementById(id);
            if (el == null) {
                return;
            }
            el.blur();
        }

        function onFocus(e) {
            HybridWebView.SendInvokeMessageToDotNet("SetFocused", [e.target.id, e.target.readOnly]);
        }

        function onUnfocus(e) {
            HybridWebView.SendInvokeMessageToDotNet("RemovedFocused", [e.target.id]);
        }


        function setText(name, text) {
            document.getElementById(name).value = text;
        }</script>
</head>
<body>
    <p>
        <#= Body #>
    </p>
    <script>
<# foreach (string id in Ids) { #>
        addListener("<#= id #>");
<# } #>
<# foreach (var keyValue in Values) { #>
        setText("<#= keyValue.Key #>", "<#= keyValue.Value #>");
<# } #>
    </script>
</body>
</html>
