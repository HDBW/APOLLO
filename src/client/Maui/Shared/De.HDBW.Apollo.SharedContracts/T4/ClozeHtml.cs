// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace De.HDBW.Apollo.SharedContracts.T4
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>

#line 1 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ClozeHtml : ClozeHtmlBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n " +
                    "   <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-wid" +
                    "th, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0\" user-scalable=\"no\" " +
                    "/>\r\n    <title></title>\r\n    <style>\r\n\r\n        body {\r\n            font-family:" +
                    " NotoSansRegular, sans-serif;\r\n            background-color: #F4E8D7;\r\n         " +
                    "   padding: 24px 24px 0px 24px;\r\n            margin: 0px;\r\n            line-height: 3;\r\n  " +
                    "      }\r\n\r\n        input[type=email], select {\r\n            color: #420A98;\r\n   " +
                    "         border: 0px;\r\n            font-size: 1rem;\r\n            margin: 0px;\r\n " +
                    "           padding: 0px;\r\n            height: 28px;\r\n            width: 128px;\r\n" +
                    "            background-color: #FEFCF7;\r\n            padding: 8px 16px 8px 16px;\r\n " +
                    "           border-radius: 4px;\r\n            box-shadow: 2px 2px 5px 1px #846C4B;" +
                    "\r\n        }\r\n\r\n            input[type=email]:focus, select:focus {\r\n            " +
                    "    outline: #420A98 solid 2px;\r\n                outline-offset: -2px;\r\n        " +
                    "    }\r\n\r\n        .inputdiv {\r\n            height: 44px;\r\n            width: 160p" +
                    "x;\r\n            line-height: 0;\r\n            margin: 0px 8px -16px 8px;\r\n       " +
                    "     box-sizing: border-box;\r\n            border: 0px;\r\n            border-radiu" +
                    "s: 4px;\r\n            background-color: #FEFCF7;\r\n            box-shadow: 2px 2px 5" +
                    "px 1px #846C4B;\r\n            overflow: hidden;\r\n            display: inline-bloc" +
                    "k;\r\n        }\r\n\r\n        p {\r\n            line-height: 3;\r\n            font-size" +
                    ": 1rem;\r\n            text-align: left;\r\n        }\r\n    </style>\r\n    <script src" +
                    "=\"_hwv/HybridWebView.js\"></script>\r\n    <script type=\"text/javascript\">\r\n       " +
                    " function addListener(id) {\r\n            var source = document.getElementById(id" +
                    ");\r\n            source.addEventListener(\'input\', onInput);\r\n            source.a" +
                    "ddEventListener(\"focus\", onFocus);\r\n            source.addEventListener(\'focusou" +
                    "t\', onUnfocus);\r\n            source.addEventListener(\'keydown\', onKeydown);\r\n\r\n " +
                    "       }\r\n\r\n        function onInput(e) {\r\n            var text = e.target.value" +
                    ";\r\n            HybridWebView.SendInvokeMessageToDotNet(\"SetValue\", [e.target.id," +
                    " text]);\r\n        }\r\n\r\n        function onKeydown(e) {\r\n            if (e.which " +
                    "== 13) {\r\n                let active = document.activeElement;\r\n                " +
                    "if (active == null) {\r\n                    return;\r\n                }\r\n\r\n       " +
                    "         var next = findNextTabStop(active);\r\n                if (next != null) " +
                    "{\r\n                    next.focus();\r\n                }\r\n                else {\r" +
                    "\n                    active.blur();\r\n                }\r\n            }\r\n        }" +
                    "\r\n\r\n        function findNextTabStop(el) {\r\n            var universe = document." +
                    "querySelectorAll(\'input, button, select, textarea, a[href]\');\r\n            var l" +
                    "ist = Array.prototype.filter.call(universe, function (item) { return item.tabInd" +
                    "ex >= \"0\" });\r\n            var index = list.indexOf(el);\r\n            return lis" +
                    "t[index + 1] || null;\r\n        }\r\n\r\n        function removeFocus(id) {\r\n        " +
                    "    var el = document.getElementById(id);\r\n            if (el == null) {\r\n      " +
                    "          return;\r\n            }\r\n            el.blur();\r\n        }\r\n\r\n        f" +
                    "unction onFocus(e) {\r\n            HybridWebView.SendInvokeMessageToDotNet(\"SetFo" +
                    "cused\", [e.target.id, e.target.readOnly]);\r\n        }\r\n\r\n        function onUnfo" +
                    "cus(e) {\r\n            HybridWebView.SendInvokeMessageToDotNet(\"RemovedFocused\", " +
                    "[e.target.id]);\r\n        }\r\n\r\n\r\n        function setText(name, text) {\r\n        " +
                    "    document.getElementById(name).value = text;\r\n        }</script>\r\n</head>\r\n<b" +
                    "ody>\r\n    <p>\r\n        ");

#line 124 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Body));

#line default
#line hidden
            this.Write("\r\n    </p>\r\n    <script>\r\n");

#line 127 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
            foreach (string id in Ids)
            {

#line default
#line hidden
                this.Write("        addListener(\"");

#line 128 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(id));

#line default
#line hidden
                this.Write("\");\r\n");

#line 129 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
            }

#line default
#line hidden

#line 130 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
            foreach (var keyValue in Values)
            {

#line default
#line hidden
                this.Write("        setText(\"");

#line 131 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(keyValue.Key));

#line default
#line hidden
                this.Write("\", \"");

#line 131 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(keyValue.Value));

#line default
#line hidden
                this.Write("\");\r\n");

#line 132 "D:\workspace\HDBW\Assessments\Assessments\Assessments\T4\ClozeHtml.tt"
            }

#line default
#line hidden
            this.Write("    </script>\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ClozeHtmlBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0)
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
